import os
import random
import asyncio
import requests
import json
from datetime import datetime
from telegram import Bot, PollType
from telegram.constants import ParseMode


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
CHANNEL_USERNAME = "@altynmaturuen"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞

LOG_FILE = "published_posts.json"
POST_TOPICS = [
    "–õ–∞–π—Ñ—Ö–∞–∫ –¥–ª—è Valorant: –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–ü–æ—á–µ–º—É Half-Life 3 –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–π–¥–µ—Ç?",
    "10 –∏–≥—Ä, –≥–¥–µ –º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è—Ç—å —á–∞—Å—ã ‚Äî –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –ø—Ä–æ–π—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞",
    "–ì–¥–µ –Ω–∞–π—Ç–∏ –∫—Ä—É—Ç—ã–µ –º–æ–¥—ã –¥–ª—è Skyrim –ø–æ—Å–ª–µ 10 –ª–µ—Ç –∏–≥—Ä—ã",
    "–ö–∞–∫ —Å–æ–±—Ä–∞—Ç—å –±—é–¥–∂–µ—Ç–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –ü–ö –≤ 2025 –≥–æ–¥—É?",
    "–ò–≥—Ä—ã —Å –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å",
    "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ñ–∏—à–∫–∏ –≤ Minecraft, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –Ω–µ –∑–Ω–∞–ª"
]

POLL_QUESTIONS = [
    ("–ö–∞–∫—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —á–∞—â–µ?", ["PC", "PS5", "Xbox", "Switch"]),
    ("–õ—é–±–∏—à—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏?", ["–î–∞", "–ù–µ—Ç", "–ú–Ω–µ –≤—Å—ë —Ä–∞–≤–Ω–æ"]),
    ("–õ—é–±–∏–º—ã–π –∂–∞–Ω—Ä?", ["–®—É—Ç–µ—Ä—ã", "–†–æ–ª–µ–≤—ã–µ", "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏", "–í—ã–∂–∏–≤–∞–ª–∫–∏"]),
    ("–ò–≥—Ä–∞–µ—à—å –±–æ–ª—å—à–µ –≤ –æ–¥–∏–Ω–æ—á–∫—É –∏–ª–∏ –≤ –∫–æ–æ–ø–µ?", ["–°–æ–ª–æ", "–ö–æ–æ–ø", "–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä"]),
]


# =================== –§–£–ù–ö–¶–ò–ò ==================== #

def load_published():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return []


def save_published(post_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π"""
    posts = load_published()
    posts.append({"id": post_id, "time": str(datetime.now())})
    with open(LOG_FILE, 'w', encoding='utf-8') as f:
        json.dump(posts, f, indent=2)


def get_steam_free_game():
    try:
        response = requests.get("https://store.steampowered.com/api/featuredgames").json()
        game = response["freegames"][0]
        return {
            "title": game['name'],
            "id": game['id'],
            "link": f"https://store.steampowered.com/app/{game['id']}",
            "type": "steam"
        }
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É –∏–∑ Steam: {e}")
        return None


def get_epic_free_game():
    try:
        response = requests.get(
            "https://store-site-backend-static.ak.epicgames.com/freeGamePromotions?country=US&language=en-US&allowCountries=US"
        ).json()
        game = response["data"]["Catalog"]["searchStore"]["elements"][0]
        return {
            "title": game['title'],
            "id": game['id'],
            "link": f"https://store.epicgames.com/en-US/p/{game['productSlug']}",
            "type": "epic"
        }
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É –∏–∑ Epic: {e}")
        return None


def generate_post(topic=None, game=None):
    greetings = [
        "üî• –°–Ω–æ–≤–∞ —Ä–∞–∑–¥–∞—á–∞!",
        "üéÆ –ö—Ç–æ —Ö–æ—á–µ—Ç —Ö–∞–ª—è–≤—ã?",
        "üí• –õ–æ–≤–∏ –º–æ–º–µ–Ω—Ç!",
        "üéÅ –°–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å:"
    ]

    signoffs = [
        "üëâ –°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ.",
        "‚è≥ –†–∞–∑–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
        "‚úÖ –ü—Ä–æ—Å—Ç–æ –∑–∞–π–¥–∏ –∏ –∑–∞–±–µ—Ä–∏.",
        "üí° –ü–æ—Å–º–æ—Ç—Ä–∏ —Ç—Ä–µ–π–ª–µ—Ä –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∫–æ–π."
    ]

    greeting = random.choice(greetings)
    signoff = random.choice(signoffs)

    if game and game['type'] == "steam":
        name = game['title']
        link = game['link']

        image_url = f"https://cdn.cloudflare.steamstatic.com/steam/apps/{game['id']}/header.jpg"

        text = f"""
{greeting}

{name} ‚Äî —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ üò≤

–û–ø–∏—Å–∞–Ω–∏–µ: [–º–æ–ª–æ–¥–µ–∂–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ —Ç–æ–º, –ø–æ—á–µ–º—É —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ]

üîó [{link}]({link})

{signoff}

#–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ–∏–≥—Ä—ã #steam—Ö–∞–ª—è–≤–∞ #{game['id']}
        """
        return text.strip(), image_url, game['title']

    elif game and game['type'] == "epic":
        name = game['title']
        link = game['link']

        image_url = game.get('keyImages', [{}])[0].get('url', "")

        text = f"""
üéÆ **{name}** ‚Äî —Ä–∞–∑–¥–∞—ë—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤ Epic!

–ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –∏ –∑–∞–±–µ—Ä–∏. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –ª—é–±–∏—à—å –ø–æ–¥–æ–±–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã.

üîó [{link}]({link})

{signoff}

#–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ–∏–≥—Ä—ã #epic—Ö–∞–ª—è–≤–∞
        """
        return text.strip(), image_url, game['title']

    else:
        # –†–∞–Ω–¥–æ–º–Ω–∞—è —Ç–µ–º–∞
        text = f"""
üî• {topic}

[–≠—Ç–æ –º–µ—Å—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ò–ò. –ú—ã –º–æ–∂–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å Qwen API –∑–¥–µ—Å—å.]

üí° –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏!
        """
        image_url = f"https://picsum.photos/seed/{random.randint(1, 999)}/600/400"
        return text.strip(), image_url, topic


async def send_poll(question, options):
    try:
        await bot.send_poll(
            chat_id=CHANNEL_USERNAME,
            question=question,
            options=options,
            type=PollType.REGULAR,
            is_anonymous=True
        )
        print("‚úÖ –û–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")


async def send_post(text, image_url=None):
    try:
        if image_url:
            await bot.send_photo(
                chat_id=CHANNEL_USERNAME,
                photo=image_url,
                caption=text[:1024],
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await bot.send_message(
                chat_id=CHANNEL_USERNAME,
                text=text,
                parse_mode=ParseMode.MARKDOWN
            )
        print("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


# =================== –ó–ê–ü–£–°–ö ==================== #

async def main():
    posts_published = load_published()
    post_ids = set(p["id"] for p in posts_published)

    post_type = random.choice(["steam", "epic", "topic"])

    if post_type == "steam":
        game = get_steam_free_game()
        if game and game["title"] not in post_ids:
            post_text, image_url, post_id = generate_post(game=game)
            await send_post(post_text, image_url)
            save_published(post_id)

    elif post_type == "epic":
        game = get_epic_free_game()
        if game and game["title"] not in post_ids:
            post_text, image_url, post_id = generate_post(game=game)
            await send_post(post_text, image_url)
            save_published(post_id)

    else:
        topic = random.choice(POST_TOPICS)
        if topic not in post_ids:
            post_text, image_url, post_id = generate_post(topic=topic)
            await send_post(post_text, image_url)
            save_published(post_id)

    # –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
    if random.random() < 0.2:
        question, options = random.choice(POLL_QUESTIONS)
        await send_poll(question, options)


if __name__ == "__main__":
    asyncio.run(main())
